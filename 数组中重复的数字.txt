class Solution {
public:
    // Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    
    
    bool duplicate(int numbers[], int length, int* duplication) {
        
        //时间复杂度O（n^2）
       /* int i=0, j=0,flag=0;
        *duplication =-1;
        for(i=0;i<length-1;i++)
        {
            if(flag==1)
                break;
            for(j=i+1;j<length;j++)
            {
                if(numbers[i]== numbers[j])
                {
                    *duplication=numbers[i];
                    flag=1;
                     break;
                }
            }
        }
        if(*duplication!=-1)
            return true;
        else
            return false;
            }*/
    
  
    //第二种方法 时间复杂度O（n）
    /*不需要额外的数组或者hash table来保存，题目里写了数组里数字的范围保证在0 ~ n-1 之间，
    所以可以利用现有数组设置标志，当一个数字被访问过后，可以设置对应位上的数 + n，之后再遇到相同的数时，
    会发现对应位上的数已经大于等于n了，那么直接返回这个数即可。*/
        int i=0, index=0;
        for(i=0;i<length;i++)
        {
            index=numbers[i]%length;
            if(numbers[index]>=length)
            {
                *duplication=index;
                return true;
            }
            numbers[index]+=length;
        }
        return false;
   }
};